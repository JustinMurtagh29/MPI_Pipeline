% Written by
%   Alessandro Motta <alessandro.motta@brain.mpg.de>
clear;

%% Configuration
rootDir = '/gaba/u/mberning/results/pipeline/20170217_ROI';
connFile = fullfile(rootDir, 'connectomeState', 'connectome_axons_18_a_ax_spine_syn_clust.mat');
synFile = fullfile(rootDir, 'connectomeState', 'SynapseAgglos_v3_ax_spine_clustered_classified.mat');

% Threshold p-values
% Chosen to be half of chance level.
pTheta = struct;
% Excitatory axons
pTheta(1).WholeCell = 0.05;
pTheta(1).ApicalDendrite = 0.04;
% Inhibitory axons
pTheta(2).Somata = 0.11;
pTheta(2).WholeCell = 0.12;
pTheta(2).ApicalDendrite = 0.05;
pTheta(2).SmoothDendrite = 0.03;
% Thalamocortical axons
pTheta(3).Somata = 0.015;
pTheta(3).WholeCell = 0.195;
pTheta(3).ApicalDendrite = 0.025;
% Corticocortical axons
pTheta(4).Somata = 0.01;
pTheta(4).WholeCell = 0.04;
pTheta(4).ApicalDendrite = 0.04;

info = Util.runInfo();

%% Loading data
param = load(fullfile(rootDir, 'allParameter.mat'));
param = param.p;

[conn, ~, axonClasses] = ...
    connectEM.Connectome.load(param, connFile, synFile);
[classConnectome, targetClasses] = ...
	connectEM.Connectome.buildClassConnectome(conn);

%% Perform analysis
for axonClassIdx = 1:numel(axonClasses)
    plotAxonClass( ...
        info, classConnectome, targetClasses, ...
        axonClasses(axonClassIdx), pTheta(axonClassIdx));
end

%% Core function
function plotAxonClass(info, classConn, targetClasses, axonClass, pTheta)
    axonProbs = connectEM.Specificity.calcChanceProbs( ...
        classConn, axonClass.axonIds, axonClass.nullAxonIds, ...
        'distribution', 'binomial');
    
    % Find classes for which a threshold was set
    specClassIds = fieldnames(pTheta);
    specClassIds(cellfun(@(n) isempty(pTheta.(n)), specClassIds)) = [];
    
    % Convert class names to indices
   [~, specClassIds] = ismember(specClassIds, targetClasses);
    specClassIds = reshape(sort(specClassIds), 1, []);

    fig = figure();
    fig.Color = 'white';
    
    for specClassIdx = 1:numel(specClassIds)
        specClassId = specClassIds(specClassIdx);
        
        % Look up p-value threshold
        specClassName = char(targetClasses(specClassId));
        specThresh = pTheta.(specClassName);

        % Select specific axons
        specAxonIds = axonProbs(:, specClassId);
        specAxonIds = axonClass.axonIds(specAxonIds < specThresh);

        % Calculate conditional class connectome
        condClassIds = setdiff( ...
            1:numel(targetClasses), specClassId);
        condClassConn = classConn(specAxonIds, condClassIds);
        
        condClassSynCount = sum(condClassConn, 2);
        condClassSynFrac = condClassConn ./ condClassSynCount;

        % Null hypothesis
        nullClassSynCount = classConn( ...
            axonClass.nullAxonIds, condClassIds);
        nullClassSynCount = sum(nullClassSynCount, 1);

        for curClassIdx = 1:numel(condClassIds)
            curClassId = condClassIds(curClassIdx);
            
            nullProb = ...
                nullClassSynCount(curClassIdx) ...
                ./ sum(nullClassSynCount);
           [nullSynFrac, nullAxonCount] = ...
                connectEM.Specificity.calcExpectedDist( ...
                    condClassSynCount, nullProb, ...
                    'distribution', 'binomial');

            binEdges = linspace(0, 1, 11);
            nullBinId = discretize(nullSynFrac, binEdges);
            nullBinCount = accumarray(nullBinId, nullAxonCount);
            
            % Do Kolmogorov-Smirnov tests
            nullCdf = cumsum(nullAxonCount);
            nullCdf = nullCdf ./ nullCdf(end);
            
           [~, ksP, ksStat] = kstest( ...
                condClassSynFrac(:, curClassIdx), ...
                'CDF', cat(2, nullSynFrac, nullCdf));
            
            ax = subplot( ...
                numel(specClassIds), numel(targetClasses), ...
                (specClassIdx - 1) * numel(targetClasses) + curClassId);
            axis(ax, 'square');
            hold(ax, 'on');
            
            % Plot CDF
            plot( ...
                ax, nullSynFrac, nullCdf, ...
                'Color', ax.ColorOrder(1, :), 'LineStyle', '--');
            plot(ax, ...
                sort(condClassSynFrac(:, curClassIdx)), ...
                linspace(0, 1, size(condClassSynFrac, 1)), ...
                'Color', ax.ColorOrder(2, :), 'LineStyle', '--');
            
            % Plot histograms
            hOne = histogram(ax, ...
                'BinCounts', nullBinCount, ...
                'BinEdges', binEdges, ...
                'Normalization', 'probability', ...
                'DisplayStyle', 'stairs', ...
                'EdgeColor', ax.ColorOrder(1, :), ...
                'LineWidth', 2, ...
                'FaceAlpha', 1);
            hTwo = histogram(ax, ...
                condClassSynFrac(:, curClassIdx), ...
                'BinEdges', binEdges, ...
                'Normalization', 'probability', ...
                'DisplayStyle', 'stairs', ...
                'EdgeColor', ax.ColorOrder(2, :), ...
                'LineWidth', 2, ...
                'FaceAlpha', 1);
            
            ax.TickDir = 'out';
            xlim(ax, [0, 1]);
            ylim(ax, [0, 1]);

            title( ...
                ax, char(targetClasses(curClassId)), ...
                'FontWeight', 'normal', 'FontSize', 10);
            annotation(fig, ...
                'textbox', ax.Position, ...
                'EdgeColor', 'none', ...
                'HorizontalAlignment', 'center', ...
                'VerticalAlignment', 'middle', ...
                'String', { ...
                    sprintf('p_{KS} = %g', ksP); ...
                    sprintf('k_{KS} = %g', ksStat)});
        end
        
        ax = subplot( ...
            numel(specClassIds), numel(targetClasses), ...
            (specClassIdx - 1) * numel(targetClasses) + specClassId);
        legend(ax, ...
            [hOne, hTwo], ...
            'Expected (Binomial)', ...
            'Observed', ...
            'Location', 'south');
        ax.Visible = 'off';
        
        annotation( ...
            'textbox', ax.Position, ...
            'EdgeColor', 'none', ...
            'HorizontalAlignment', 'center', ...
            'VerticalAlignment', 'middle', ...
            'String', { ...
                sprintf('%s specific', specClassName);
                sprintf('%d axons with p â‰¤ %g', ...
                    numel(specAxonIds), specThresh)});
    end
    
    annotation( ...
        'textbox', [0, 0.9, 1, 0.1], ...
        'EdgeColor', 'none', ...
        'HorizontalAlignment', 'center', ...
        'String', { ...
            axonClass.title;
            info.filename;
            info.git_repos{1}.hash});
        
end