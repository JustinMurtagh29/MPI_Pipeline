var mapping = Array(15030572).fill(0);
var agglos  = [];
agglos.push([2613621]);
agglos.push([2614164]);
agglos.push([2615186]);
agglos.push([2615363]);
agglos.push([2615391]);
agglos.push([2615393]);
agglos.push([2615470]);
agglos.push([2615473]);
agglos.push([2615474]);
agglos.push([2615477]);
agglos.push([2615529]);
agglos.push([2615618]);
agglos.push([2615659]);
agglos.push([2615734]);
agglos.push([2615739]);
agglos.push([2615771]);
agglos.push([2615774]);
agglos.push([2615800]);
agglos.push([2615838]);
agglos.push([2615880]);
agglos.push([2615881]);
agglos.push([2615903]);
agglos.push([2615905]);
agglos.push([2615937]);
agglos.push([2615939]);
agglos.push([2616007]);
agglos.push([2623681]);
agglos.push([2623755]);
agglos.push([3792668]);
agglos.push([3792702]);
agglos.push([3792703]);
agglos.push([3792704]);
agglos.push([3792705]);
agglos.push([3792709]);
agglos.push([3792710]);
agglos.push([3792724]);
agglos.push([3792730]);
agglos.push([3792736]);
agglos.push([3792742]);
agglos.push([3792743]);
agglos.push([3792751]);
agglos.push([3792758]);
agglos.push([3792774]);
agglos.push([3792781]);
agglos.push([3792787]);
agglos.push([3792792]);
agglos.push([3792803]);
agglos.push([3792822]);
agglos.push([3792981]);
agglos.push([3793026]);
agglos.push([3793028]);
agglos.push([3793109]);
agglos.push([3793137]);
agglos.push([3793138]);
agglos.push([3793158]);
agglos.push([3793164]);
agglos.push([3793197]);
agglos.push([3793213]);
agglos.push([3793215]);
agglos.push([3793248]);
agglos.push([3793278]);
agglos.push([3793331]);
agglos.push([3793378]);
agglos.push([3793382]);
agglos.push([3793530]);
agglos.push([3793854]);
agglos.push([3793858]);
agglos.push([3793966]);
agglos.push([3793967]);
agglos.push([3794004]);
agglos.push([3794314]);
agglos.push([3794678]);
agglos.push([3794714]);
agglos.push([3794784]);
agglos.push([3794876]);
agglos.push([3794882]);
agglos.push([3797252]);
agglos.push([3797282]);
agglos.push([3797331]);
agglos.push([3802924]);
agglos.push([3803701]);
agglos.push([3804844]);
agglos.push([3805188]);

for(var i = 0; i < agglos.length; i++){
    var segIds = agglos[i];
    for(var j = 0; j < segIds.length; j++){
        mapping[segIds[j]] = (i + 1);
    }
}

var cube = app.oxalis.model.getSegmentationBinary().cube;
cube.setMapping(mapping);