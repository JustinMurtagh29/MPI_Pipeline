function cnets = autoTrain( cnets, saveFolder, numParents, numOffspring, lrFactor, numGenerations)
%AUTOTRAIN Automatic training of cnns.
% INPUT cnets: Cell array of initial cnets.
%       saveFolder: Save output of each generation.
%       numParents: Integer specifying how many individuals survive per
%           iteration.
%       numOffspring: Number of offspring generated by *each* parent.
%       lrFactor: The learning rate of each parent is evolved by
%           numOffspring powers of the lrFactor. The powers are
%           symetrically centered around zero.
%       numGenerations: Total number of evolutionary iterations.
% Author: Benedikt Staffler <benedikt.staffler@brain.mpg.de>

if ~exist('numParents','var') || isempty(numParents)
    numParents = 1;
end
if ~exist('numOffspring','var') || isempty(numOffspring)
    numOffspring = 3;
end
if ~exist('lrFactor','var') || isempty(lrFactor)
    lrFactor = 10;
end
if ~exist('numGenerations','var') || isempty(numGenerations)
    numGenerations = 100;
end

saveFolder = [Util.addFilesep(saveFolder), datestr(clock, 30), filesep];

if ~exist('saveFolder','dir')
    mkdir(saveFolder);
end

fprintf('[%s] Starting training.\n',datestr(now));
options = {'max_iter', 10, 'snapshot', 0, 'val_iter', 0, 'gpuDev', false};
lrFactor = lrFactor.^((1:numOffspring) - (numOffspring+1)/2);
cluster = getCluster('test');

for i = 1:numGenerations
    fprintf('[%s] Breeding generation %d offspring.\n',datestr(now), i);
    cnets = createOffspring(cnets, lrFactor);
    jobs = Codat.CNN.Cluster.train('membraneWeighted', cnets, [],...
        ['Gen', num2str(i)], cluster,[], options{:});
    notFinished = true;
    while notFinished
        jobFinished = false(length(jobs),1);
        for j = 1:length(jobs)
            jobFinished(j) = strcmp(jobs(j).State,'finished');
        end
        if all(jobFinished)
            notFinished = false;
        else
            pause(60);
        end
    end
    out = cell(length(jobs),2);
    for j = 1:length(jobs)
        out(j,:) = fetchOutputs(jobs(j));
    end
    fprintf('[%s] Evaluating generation %d.\n',datestr(now),i);
    result = Codat.CNN.Cluster.validateCnets(out(:,1),'membrane',cluster);
    loss = result();
    [~,idx] = sort(loss,'ascend');
    loss = loss(idx(1:numParents));
    nextGen = cnets(idx(1:numParents));
    m = matfile([saveFolder, 'Generation', sprintf('%03d',i) '.mat'],'Writable',true);
    m.cnets = nextGen;
    m.loss = loss;
    cnets = nextGen;
    fprintf('[%s] Finished iteration %d/%d.\n',datestr(now),i,numGenerations);
end

end

function cnets = createOffspring(cnets, lrFactor)
cnets = repmat(cnets,1,length(lrFactor));
for i = 1:size(cnets,1)
    baseLR = cnets{i,1}.optimizer.learningRate;
    for j = 1:size(cnets,2)
        cnets{i,j}.optimizer.learningRate = baseLR*lrFactor(j);
    end
end
cnets = reshape(cnets,numel(cnets),1);
end

