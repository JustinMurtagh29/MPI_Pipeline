function [ M, ind ] = maxPooling( cnet, X, lyr )
%MAXPOOLING Perform 2x2x2 max pooling given d-regularity and stride.
% Author: Benedikt Staffler <benedikt.staffler@brain.mpg.de>

d = cnet.d(lyr - 1,1:3).*cnet.stride{lyr};
%every max operates one 2x2x2 pooling region which is moved over the whole
%array
[M,ind] = max([subsref(X(1:end-d(1),1:end-d(2),1:end-d(3),:),struct('type','()','subs',{{':'}})), ...
               subsref(X(1 + d(1):end,1:end-d(2),1:end-d(3),:),struct('type','()','subs',{{':'}})), ...
               subsref(X(1:end-d(1),1 + d(2):end,1:end-d(3),:),struct('type','()','subs',{{':'}})), ...
               subsref(X(1 + d(1):end,1 + d(2):end,1:end-d(3),:),struct('type','()','subs',{{':'}})), ...
               subsref(X(1:end-d(1),1:end-d(2),1 + d(3):end,:),struct('type','()','subs',{{':'}})), ...
               subsref(X(1 + d(1):end,1:end-d(2),1 + d(3):end,:),struct('type','()','subs',{{':'}})), ...
               subsref(X(1:end-d(1),1 + d(2):end,1 + d(3):end,:),struct('type','()','subs',{{':'}})), ...
               subsref(X(1 + d(1):end,1 + d(2):end,1 + d(3):end,:),struct('type','()','subs',{{':'}}))],[],2);
sX = size(X);
sX(end + 1:4) = 1;
M = reshape(M,max([sX(1:3) - d,sX(4)],[1 1 1 1]));
ind = reshape(ind,max([sX(1:3) - d,sX(4)],[1 1 1 1]));
end